{"ast":null,"code":"var _jsxFileName = \"/home/iarche/Documents/react/react_redux_hooks/src/components/Posts.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport ReactPaginate from 'react-paginate';\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { fetchPosts } from \"../actions/postActions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Posts = () => {\n  _s();\n\n  //get the data from the redux store using the useSelector.\n  const posts = useSelector(state => state.posts);\n  console.log('posts', posts); //filter using the hooks state and not using reducer.\n  //1. search is the even.target value that is captureed on change.\n  //2 we set search using the setSerch Method i.e setSearch(event.target.value) this is equivalent to search.\n\n  const [search, setSearch] = useState(\"\"); //4.we set the state of the filteresd posts using setFilteredPost \n  //from the useEffect method we set the state to be filteredPosts.\n  //then we use the filterdPosts to map the data.\n\n  const [filteredPosts, setFilteredPosts] = useState([]); ///this is for pagination.\n\n  const [offset, setOffset] = useState(0);\n  const [perPage] = useState(20);\n  const [pageCount, setPageCount] = useState(0);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const loadPosts = async () => {\n      await dispatch(fetchPosts());\n    };\n\n    loadPosts();\n  }, []);\n  useEffect(() => {\n    setFilteredPosts(posts.items.filter(post => post.title.toLowerCase().includes(search.toLowerCase())));\n    setPageCount(Math.ceil(filteredPosts.length / perPage));\n  }, [search, posts]);\n\n  const handlePageClick = e => {\n    const selectedPage = e.selected;\n    setOffset(selectedPage + 1);\n  };\n\n  const slice = filteredPosts.slice(offset, offset + perPage);\n  console.log('sliece', slice);\n  const postItems = slice.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: post.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: post.body\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this)]\n  }, post.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 7\n  }, this)).reverse(); // setData(postItems)\n  // setPageCount(Math.ceil(filteredPosts.length/perPage));\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"search\", /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"search\",\n        placeholder: \"Search\",\n        onChange: e => {\n          setSearch(e.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), postItems, /*#__PURE__*/_jsxDEV(ReactPaginate, {\n      previousLabel: \"prev\",\n      nextLabel: \"next\",\n      breakLabel: \"...\",\n      breakClassName: \"break-me\",\n      pageCount: pageCount,\n      marginPagesDisplayed: 2,\n      pageRangeDisplayed: 5,\n      onPageChange: handlePageClick,\n      containerClassName: \"pagination\",\n      subContainerClassName: \"pages pagination\",\n      activeClassName: \"active\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Posts, \"uVCws44ROAArGX8tr8lEvo2UT+o=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = Posts;\nexport default Posts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"sources":["/home/iarche/Documents/react/react_redux_hooks/src/components/Posts.js"],"names":["React","Component","useEffect","useState","useSelector","useDispatch","ReactPaginate","PropTypes","connect","fetchPosts","Posts","posts","state","console","log","search","setSearch","filteredPosts","setFilteredPosts","offset","setOffset","perPage","pageCount","setPageCount","dispatch","loadPosts","items","filter","post","title","toLowerCase","includes","Math","ceil","length","handlePageClick","e","selectedPage","selected","slice","postItems","map","body","id","reverse","target","value"],"mappings":"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","sourcesContent":["import React, { Component, useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport ReactPaginate from 'react-paginate';\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { fetchPosts } from \"../actions/postActions\";\n\n\nconst Posts = () => {\n  //get the data from the redux store using the useSelector.\n  const posts = useSelector((state) => state.posts); \n\n  console.log('posts',posts);\n\n  \n\n  //filter using the hooks state and not using reducer.\n  //1. search is the even.target value that is captureed on change.\n  //2 we set search using the setSerch Method i.e setSearch(event.target.value) this is equivalent to search.\n\n  \n  const [search ,setSearch] = useState(\"\");   \n  \n  //4.we set the state of the filteresd posts using setFilteredPost \n  //from the useEffect method we set the state to be filteredPosts.\n  //then we use the filterdPosts to map the data.\n\n  const [filteredPosts,setFilteredPosts] = useState([]);  \n  ///this is for pagination.\n  const [offset,setOffset] =  useState(0);\n  \n  const [perPage] = useState(20);\n  const [pageCount,setPageCount] = useState(0);\n  const dispatch = useDispatch();\n  \n  useEffect(() => {\n    const loadPosts = async () => {\n      await dispatch(fetchPosts());\n    };\n\n    loadPosts();\n\n\n  }, []);\n\n  useEffect(() => {\n    setFilteredPosts(\n      posts.items.filter((post) =>\n        post.title.toLowerCase().includes(search.toLowerCase())\n      )\n    );\n    setPageCount(Math.ceil(filteredPosts.length/perPage));\n  }, [search, posts]);\n\n\n\n  const handlePageClick = (e) => {\n    const selectedPage = e.selected;\n    setOffset(selectedPage + 1)\n};\n\nconst slice = filteredPosts.slice(offset,offset + perPage);\nconsole.log('sliece',slice);\n\nconst postItems = slice.map((post) => (\n      <div key={post.id}>\n        <h3>{post.title}</h3>\n        <p>{post.body}</p>\n      </div> \n    )\n    \n    ).reverse();\n    // setData(postItems)\n    // setPageCount(Math.ceil(filteredPosts.length/perPage));\n  return (\n    <div>\n      search\n      <div>\n        <input\n          type=\"text\"\n          name=\"search\"\n          placeholder=\"Search\"\n          onChange={(e) => {\n            setSearch(e.target.value);\n          }}\n        />\n      </div>\n      <hr></hr>\n      <h1>Posts</h1>\n      {postItems}\n      <ReactPaginate\n                    previousLabel={\"prev\"}\n                    nextLabel={\"next\"}\n                    breakLabel={\"...\"}\n                    breakClassName={\"break-me\"}\n                    pageCount={pageCount}\n                    marginPagesDisplayed={2}\n                    pageRangeDisplayed={5}\n                    onPageChange={handlePageClick}\n                    containerClassName={\"pagination\"}\n                    subContainerClassName={\"pages pagination\"}\n                    activeClassName={\"active\"}/>\n    </div>\n  );\n};\n\nexport default Posts;\n"]},"metadata":{},"sourceType":"module"}