{"ast":null,"code":"import { FETCH_POSTS, NEW_POST, SEARCH_POST } from \"../actions/types\";\nconst initialState = {\n  items: [],\n  item: {}\n};\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case FETCH_POSTS:\n      return { ...state,\n        items: action.payload\n      };\n\n    case NEW_POST:\n      return { ...state,\n        item: action.payload,\n        items: [...state.items, action.payload]\n      };\n\n    case SEARCH_POST:\n      let value = action.payload;\n      let filteredValues = state.items.filter(itema => {\n        if (value) {\n          return itema.title.toLowerCase().includes(value);\n        } else {\n          return FETCH_POSTS;\n        }\n      });\n      return { ...state,\n        items: filteredValues\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/iarche/Documents/react/react_redux_hooks/src/reducers/postReducer.js"],"names":["FETCH_POSTS","NEW_POST","SEARCH_POST","initialState","items","item","state","action","type","payload","value","filteredValues","filter","itema","title","toLowerCase","includes"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,QAAtB,EAAgCC,WAAhC,QAAmD,kBAAnD;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,IAAI,EAAE;AAFa,CAArB;AAKA,eAAe,UAAUC,KAAK,GAAGH,YAAlB,EAAgCI,MAAhC,EAAwC;AACrD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,WAAL;AACE,aAAO,EACL,GAAGM,KADE;AAELF,QAAAA,KAAK,EAAEG,MAAM,CAACE;AAFT,OAAP;;AAIF,SAAKR,QAAL;AACE,aAAO,EACL,GAAGK,KADE;AAELD,QAAAA,IAAI,EAAEE,MAAM,CAACE,OAFR;AAGLL,QAAAA,KAAK,EAAE,CAAC,GAAGE,KAAK,CAACF,KAAV,EAAiBG,MAAM,CAACE,OAAxB;AAHF,OAAP;;AAKF,SAAKP,WAAL;AACE,UAAIQ,KAAK,GAAGH,MAAM,CAACE,OAAnB;AAEA,UAAIE,cAAc,GAAGL,KAAK,CAACF,KAAN,CAAYQ,MAAZ,CAAoBC,KAAD,IAAW;AACjD,YAAIH,KAAJ,EAAW;AACT,iBAAOG,KAAK,CAACC,KAAN,CAAYC,WAAZ,GAA0BC,QAA1B,CAAmCN,KAAnC,CAAP;AACD,SAFD,MAEO;AACL,iBAAOV,WAAP;AACD;AACF,OANoB,CAArB;AAQA,aAAO,EACL,GAAGM,KADE;AAELF,QAAAA,KAAK,EAAEO;AAFF,OAAP;;AAIF;AACE,aAAOL,KAAP;AA5BJ;AA8BD","sourcesContent":["import { FETCH_POSTS, NEW_POST, SEARCH_POST } from \"../actions/types\";\n\nconst initialState = {\n  items: [],\n  item: {},\n};\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case FETCH_POSTS:\n      return {\n        ...state,\n        items: action.payload,\n      };\n    case NEW_POST:\n      return {\n        ...state,\n        item: action.payload,\n        items: [...state.items, action.payload],\n      };\n    case SEARCH_POST:\n      let value = action.payload;\n\n      let filteredValues = state.items.filter((itema) => {\n        if (value) {\n          return itema.title.toLowerCase().includes(value);\n        } else {\n          return FETCH_POSTS;\n        }\n      });\n\n      return {\n        ...state,\n        items: filteredValues,\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}